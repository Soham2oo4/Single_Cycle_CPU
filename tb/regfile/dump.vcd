$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module  $end
  $var wire 1 # clk $end
  $var wire 1 $ rst_n $end
  $var wire 5 % address1 [4:0] $end
  $var wire 5 & address2 [4:0] $end
  $var wire 32 ' read_data1 [31:0] $end
  $var wire 32 ( read_data2 [31:0] $end
  $var wire 5 ) address3 [4:0] $end
  $var wire 32 * write_data [31:0] $end
  $var wire 1 + write_enable $end
  $scope module regfile $end
   $var wire 1 , clk $end
   $var wire 1 - rst_n $end
   $var wire 5 . address1 [4:0] $end
   $var wire 5 / address2 [4:0] $end
   $var wire 32 0 read_data1 [31:0] $end
   $var wire 32 1 read_data2 [31:0] $end
   $var wire 5 2 address3 [4:0] $end
   $var wire 32 3 write_data [31:0] $end
   $var wire 1 4 write_enable $end
   $var wire 32 5 registers[0] [31:0] $end
   $var wire 32 6 registers[1] [31:0] $end
   $var wire 32 7 registers[2] [31:0] $end
   $var wire 32 8 registers[3] [31:0] $end
   $var wire 32 9 registers[4] [31:0] $end
   $var wire 32 : registers[5] [31:0] $end
   $var wire 32 ; registers[6] [31:0] $end
   $var wire 32 < registers[7] [31:0] $end
   $var wire 32 = registers[8] [31:0] $end
   $var wire 32 > registers[9] [31:0] $end
   $var wire 32 ? registers[10] [31:0] $end
   $var wire 32 @ registers[11] [31:0] $end
   $var wire 32 A registers[12] [31:0] $end
   $var wire 32 B registers[13] [31:0] $end
   $var wire 32 C registers[14] [31:0] $end
   $var wire 32 D registers[15] [31:0] $end
   $var wire 32 E registers[16] [31:0] $end
   $var wire 32 F registers[17] [31:0] $end
   $var wire 32 G registers[18] [31:0] $end
   $var wire 32 H registers[19] [31:0] $end
   $var wire 32 I registers[20] [31:0] $end
   $var wire 32 J registers[21] [31:0] $end
   $var wire 32 K registers[22] [31:0] $end
   $var wire 32 L registers[23] [31:0] $end
   $var wire 32 M registers[24] [31:0] $end
   $var wire 32 N registers[25] [31:0] $end
   $var wire 32 O registers[26] [31:0] $end
   $var wire 32 P registers[27] [31:0] $end
   $var wire 32 Q registers[28] [31:0] $end
   $var wire 32 R registers[29] [31:0] $end
   $var wire 32 S registers[30] [31:0] $end
   $var wire 32 T registers[31] [31:0] $end
   $scope module unnamedblk1 $end
    $var wire 32 U i [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
1#
0$
b00000 %
b00000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000 )
b00000000000000000000000000000000 *
0+
1,
0-
b00000 .
b00000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000 2
b00000000000000000000000000000000 3
04
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000100000 U
#5000
0#
0,
#10000
1#
1,
#10001
